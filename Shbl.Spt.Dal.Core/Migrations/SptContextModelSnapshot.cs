// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shbl.Spt.Dal.Core.Context;

#nullable disable

namespace Shbl.Spt.Dal.Core.Migrations
{
    [DbContext(typeof(SptContext))]
    partial class SptContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Activities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActivityDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("ActivityOrder")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ActivitySession")
                        .HasColumnType("tinyint");

                    b.Property<string>("ActivityTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTest")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Activities.SptUserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SptUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("SptUserId");

                    b.ToTable("SptUserActivity");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Activities.SptUserActivityDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Result")
                        .HasColumnType("bit");

                    b.Property<int>("UserActivityId")
                        .HasColumnType("int");

                    b.Property<int>("WordSpeakerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserActivityId");

                    b.HasIndex("WordSpeakerId");

                    b.ToTable("SptUserActivityDetail");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Auth.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("AgeGroup")
                        .HasColumnType("tinyint");

                    b.Property<int>("CfTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("ProficiencyLevel")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CfTypeId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Auth.SptUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("SptUser");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.General.EventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageOne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventLog");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Word.CfType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CfTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CfType");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Word.CfTypeSpeaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CfTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileName1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CfTypeId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("CfTypeSpeaker");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Word.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TestOnly")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Speaker");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Word.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("PairId")
                        .HasColumnType("int");

                    b.Property<byte>("SoundGroup")
                        .HasColumnType("tinyint");

                    b.Property<bool>("TestOnly")
                        .HasColumnType("bit");

                    b.Property<string>("WordEntry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PairId");

                    b.ToTable("Word");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Word.WordSpeaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("int");

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpeakerId");

                    b.HasIndex("WordId");

                    b.ToTable("WordSpeaker");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Activities.SptUserActivity", b =>
                {
                    b.HasOne("Shbl.Spt.Model.Core.Entity.Activities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shbl.Spt.Model.Core.Entity.Auth.SptUser", "SptUser")
                        .WithMany("SptUserActivities")
                        .HasForeignKey("SptUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("SptUser");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Activities.SptUserActivityDetail", b =>
                {
                    b.HasOne("Shbl.Spt.Model.Core.Entity.Activities.SptUserActivity", "SptUserActivity")
                        .WithMany("SptUserActivityDetails")
                        .HasForeignKey("UserActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shbl.Spt.Model.Core.Entity.Word.WordSpeaker", "WordSpeaker")
                        .WithMany("SptUserActivityDetail")
                        .HasForeignKey("WordSpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SptUserActivity");

                    b.Navigation("WordSpeaker");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Auth.Person", b =>
                {
                    b.HasOne("Shbl.Spt.Model.Core.Entity.Word.CfType", "CfType")
                        .WithMany()
                        .HasForeignKey("CfTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CfType");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Auth.SptUser", b =>
                {
                    b.HasOne("Shbl.Spt.Model.Core.Entity.Auth.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Word.CfTypeSpeaker", b =>
                {
                    b.HasOne("Shbl.Spt.Model.Core.Entity.Word.CfType", "CfType")
                        .WithMany("CfTypeSpeakers")
                        .HasForeignKey("CfTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shbl.Spt.Model.Core.Entity.Word.Speaker", "Speaker")
                        .WithMany("CfTypeSpeakers")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CfType");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Word.Word", b =>
                {
                    b.HasOne("Shbl.Spt.Model.Core.Entity.Word.Word", "Pair")
                        .WithMany()
                        .HasForeignKey("PairId");

                    b.Navigation("Pair");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Word.WordSpeaker", b =>
                {
                    b.HasOne("Shbl.Spt.Model.Core.Entity.Word.Speaker", "Speaker")
                        .WithMany()
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shbl.Spt.Model.Core.Entity.Word.Word", "Word")
                        .WithMany("WordSpeakers")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speaker");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Activities.SptUserActivity", b =>
                {
                    b.Navigation("SptUserActivityDetails");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Auth.SptUser", b =>
                {
                    b.Navigation("SptUserActivities");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Word.CfType", b =>
                {
                    b.Navigation("CfTypeSpeakers");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Word.Speaker", b =>
                {
                    b.Navigation("CfTypeSpeakers");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Word.Word", b =>
                {
                    b.Navigation("WordSpeakers");
                });

            modelBuilder.Entity("Shbl.Spt.Model.Core.Entity.Word.WordSpeaker", b =>
                {
                    b.Navigation("SptUserActivityDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
